// <auto-generated />
using System;
using GameAssetsStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameAssetsStore.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230810155848_TransactionEntity")]
    partial class TransactionEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AssetsCategories", b =>
                {
                    b.Property<Guid>("AssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AssetId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("AssetsCategories");

                    b.HasData(
                        new
                        {
                            AssetId = new Guid("6a593e06-b76d-4fc8-97a9-1400c907f378"),
                            CategoryId = new Guid("5ed5f1c8-98c6-48e0-b479-51a81d3036d9")
                        },
                        new
                        {
                            AssetId = new Guid("33693985-9f7e-464f-9dee-2005a19a1865"),
                            CategoryId = new Guid("c98b256b-dc33-4680-a53e-084c0111844b")
                        },
                        new
                        {
                            AssetId = new Guid("33693985-9f7e-464f-9dee-2005a19a1865"),
                            CategoryId = new Guid("a27bb29f-b235-40d4-bb11-ea4318afd3c6")
                        },
                        new
                        {
                            AssetId = new Guid("c017a10c-80f3-4184-ac8b-2b912c15d568"),
                            CategoryId = new Guid("59a1562a-6e96-4d82-b025-a28cb59c7e0c")
                        },
                        new
                        {
                            AssetId = new Guid("755dcf8a-be70-4351-8cd3-4ebd2765e520"),
                            CategoryId = new Guid("5ed5f1c8-98c6-48e0-b479-51a81d3036d9")
                        },
                        new
                        {
                            AssetId = new Guid("9e7a3e53-ae65-4908-aa4c-9291dda70717"),
                            CategoryId = new Guid("14b122d0-90bf-45aa-8b92-e02cd29784d3")
                        },
                        new
                        {
                            AssetId = new Guid("97501e8c-cc13-4123-b79d-b4ef776919aa"),
                            CategoryId = new Guid("e70af9fb-3fe7-430e-a959-2c201383e83a")
                        },
                        new
                        {
                            AssetId = new Guid("97501e8c-cc13-4123-b79d-b4ef776919aa"),
                            CategoryId = new Guid("59a1562a-6e96-4d82-b025-a28cb59c7e0c")
                        },
                        new
                        {
                            AssetId = new Guid("f3813f3f-e34a-49a6-a439-bc5a2273184c"),
                            CategoryId = new Guid("510af335-4b59-49fe-8022-141f5cc410d4")
                        },
                        new
                        {
                            AssetId = new Guid("f3813f3f-e34a-49a6-a439-bc5a2273184c"),
                            CategoryId = new Guid("14b122d0-90bf-45aa-8b92-e02cd29784d3")
                        },
                        new
                        {
                            AssetId = new Guid("588f0697-ea69-42b5-a465-c49b2d381863"),
                            CategoryId = new Guid("5ed5f1c8-98c6-48e0-b479-51a81d3036d9")
                        },
                        new
                        {
                            AssetId = new Guid("b02d32fa-4ae8-4724-9586-c56683ff9dcd"),
                            CategoryId = new Guid("1e746e77-4e0a-4c04-aba2-1a347767ad3a")
                        },
                        new
                        {
                            AssetId = new Guid("c7bc601f-c4a1-4569-8b6a-cdc57714e40d"),
                            CategoryId = new Guid("59a1562a-6e96-4d82-b025-a28cb59c7e0c")
                        },
                        new
                        {
                            AssetId = new Guid("7efbf3d9-4206-4b7b-b659-f0072348d9f0"),
                            CategoryId = new Guid("e70af9fb-3fe7-430e-a959-2c201383e83a")
                        },
                        new
                        {
                            AssetId = new Guid("7efbf3d9-4206-4b7b-b659-f0072348d9f0"),
                            CategoryId = new Guid("59a1562a-6e96-4d82-b025-a28cb59c7e0c")
                        },
                        new
                        {
                            AssetId = new Guid("3a815a72-fc65-4a95-bcd1-f22583602817"),
                            CategoryId = new Guid("59a1562a-6e96-4d82-b025-a28cb59c7e0c")
                        });
                });

            modelBuilder.Entity("AssetsSubCategories", b =>
                {
                    b.Property<Guid>("AssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AssetId", "SubCategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("AssetsSubCategories");

                    b.HasData(
                        new
                        {
                            AssetId = new Guid("f3813f3f-e34a-49a6-a439-bc5a2273184c"),
                            SubCategoryId = new Guid("a9203c28-f272-4c4c-92b8-0d75352a31cb")
                        },
                        new
                        {
                            AssetId = new Guid("c017a10c-80f3-4184-ac8b-2b912c15d568"),
                            SubCategoryId = new Guid("fdeb520b-93db-492b-a152-19a5a9c29227")
                        },
                        new
                        {
                            AssetId = new Guid("97501e8c-cc13-4123-b79d-b4ef776919aa"),
                            SubCategoryId = new Guid("fdeb520b-93db-492b-a152-19a5a9c29227")
                        },
                        new
                        {
                            AssetId = new Guid("c7bc601f-c4a1-4569-8b6a-cdc57714e40d"),
                            SubCategoryId = new Guid("fdeb520b-93db-492b-a152-19a5a9c29227")
                        },
                        new
                        {
                            AssetId = new Guid("7efbf3d9-4206-4b7b-b659-f0072348d9f0"),
                            SubCategoryId = new Guid("fdeb520b-93db-492b-a152-19a5a9c29227")
                        },
                        new
                        {
                            AssetId = new Guid("3a815a72-fc65-4a95-bcd1-f22583602817"),
                            SubCategoryId = new Guid("fdeb520b-93db-492b-a152-19a5a9c29227")
                        },
                        new
                        {
                            AssetId = new Guid("755dcf8a-be70-4351-8cd3-4ebd2765e520"),
                            SubCategoryId = new Guid("89132449-6f33-4a1a-a8a0-24a72e99fab7")
                        },
                        new
                        {
                            AssetId = new Guid("755dcf8a-be70-4351-8cd3-4ebd2765e520"),
                            SubCategoryId = new Guid("2681e9d1-344b-4d58-8916-2c8732465d0a")
                        },
                        new
                        {
                            AssetId = new Guid("f3813f3f-e34a-49a6-a439-bc5a2273184c"),
                            SubCategoryId = new Guid("db6a3733-625e-4ad2-bdf5-32337a91df12")
                        },
                        new
                        {
                            AssetId = new Guid("97501e8c-cc13-4123-b79d-b4ef776919aa"),
                            SubCategoryId = new Guid("d8ac59b9-c97a-47db-a3de-3c7ed15515d5")
                        },
                        new
                        {
                            AssetId = new Guid("7efbf3d9-4206-4b7b-b659-f0072348d9f0"),
                            SubCategoryId = new Guid("d8ac59b9-c97a-47db-a3de-3c7ed15515d5")
                        },
                        new
                        {
                            AssetId = new Guid("33693985-9f7e-464f-9dee-2005a19a1865"),
                            SubCategoryId = new Guid("8359654e-6e96-4254-999b-51b0ad1c9e1f")
                        },
                        new
                        {
                            AssetId = new Guid("33693985-9f7e-464f-9dee-2005a19a1865"),
                            SubCategoryId = new Guid("a1ae6147-9ed9-4243-8c9c-90d9a2549536")
                        },
                        new
                        {
                            AssetId = new Guid("33693985-9f7e-464f-9dee-2005a19a1865"),
                            SubCategoryId = new Guid("4e42eba0-be74-4b1b-968d-9c104a417c10")
                        },
                        new
                        {
                            AssetId = new Guid("6a593e06-b76d-4fc8-97a9-1400c907f378"),
                            SubCategoryId = new Guid("1359383e-3a4e-408d-91fb-aa9b9425df6f")
                        },
                        new
                        {
                            AssetId = new Guid("755dcf8a-be70-4351-8cd3-4ebd2765e520"),
                            SubCategoryId = new Guid("1359383e-3a4e-408d-91fb-aa9b9425df6f")
                        },
                        new
                        {
                            AssetId = new Guid("c7bc601f-c4a1-4569-8b6a-cdc57714e40d"),
                            SubCategoryId = new Guid("1359383e-3a4e-408d-91fb-aa9b9425df6f")
                        },
                        new
                        {
                            AssetId = new Guid("9e7a3e53-ae65-4908-aa4c-9291dda70717"),
                            SubCategoryId = new Guid("5dcda147-b9e1-4881-adc9-c9ed4837c8cf")
                        },
                        new
                        {
                            AssetId = new Guid("6a593e06-b76d-4fc8-97a9-1400c907f378"),
                            SubCategoryId = new Guid("c78774c6-65c5-4d77-ab68-d9b27aef707d")
                        },
                        new
                        {
                            AssetId = new Guid("588f0697-ea69-42b5-a465-c49b2d381863"),
                            SubCategoryId = new Guid("c78774c6-65c5-4d77-ab68-d9b27aef707d")
                        },
                        new
                        {
                            AssetId = new Guid("b02d32fa-4ae8-4724-9586-c56683ff9dcd"),
                            SubCategoryId = new Guid("d38b77d4-2ba2-404e-bc9c-ee5a55925176")
                        },
                        new
                        {
                            AssetId = new Guid("33693985-9f7e-464f-9dee-2005a19a1865"),
                            SubCategoryId = new Guid("f5668d1f-6250-4da1-87d9-fe144189d1fd")
                        });
                });

            modelBuilder.Entity("CategoriesSubCategories", b =>
                {
                    b.Property<Guid>("GeneralCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GeneralCategoryId", "SubCategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("CategoriesSubCategories");

                    b.HasData(
                        new
                        {
                            GeneralCategoryId = new Guid("59a1562a-6e96-4d82-b025-a28cb59c7e0c"),
                            SubCategoryId = new Guid("1359383e-3a4e-408d-91fb-aa9b9425df6f")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("59a1562a-6e96-4d82-b025-a28cb59c7e0c"),
                            SubCategoryId = new Guid("fdeb520b-93db-492b-a152-19a5a9c29227")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("59a1562a-6e96-4d82-b025-a28cb59c7e0c"),
                            SubCategoryId = new Guid("d8ac59b9-c97a-47db-a3de-3c7ed15515d5")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("59a1562a-6e96-4d82-b025-a28cb59c7e0c"),
                            SubCategoryId = new Guid("0cb36015-ffd6-4836-a0f3-2f8bc803a75e")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("e70af9fb-3fe7-430e-a959-2c201383e83a"),
                            SubCategoryId = new Guid("1359383e-3a4e-408d-91fb-aa9b9425df6f")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("e70af9fb-3fe7-430e-a959-2c201383e83a"),
                            SubCategoryId = new Guid("fdeb520b-93db-492b-a152-19a5a9c29227")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("e70af9fb-3fe7-430e-a959-2c201383e83a"),
                            SubCategoryId = new Guid("d8ac59b9-c97a-47db-a3de-3c7ed15515d5")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("e70af9fb-3fe7-430e-a959-2c201383e83a"),
                            SubCategoryId = new Guid("0cb36015-ffd6-4836-a0f3-2f8bc803a75e")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("5ed5f1c8-98c6-48e0-b479-51a81d3036d9"),
                            SubCategoryId = new Guid("2681e9d1-344b-4d58-8916-2c8732465d0a")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("5ed5f1c8-98c6-48e0-b479-51a81d3036d9"),
                            SubCategoryId = new Guid("fdeb520b-93db-492b-a152-19a5a9c29227")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("5ed5f1c8-98c6-48e0-b479-51a81d3036d9"),
                            SubCategoryId = new Guid("1359383e-3a4e-408d-91fb-aa9b9425df6f")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("5ed5f1c8-98c6-48e0-b479-51a81d3036d9"),
                            SubCategoryId = new Guid("abf6b357-436f-43cc-8eb9-7b4cb7a333dd")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("5ed5f1c8-98c6-48e0-b479-51a81d3036d9"),
                            SubCategoryId = new Guid("eeb4556f-1b3e-4b25-81ef-8f2c1cc11498")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("5ed5f1c8-98c6-48e0-b479-51a81d3036d9"),
                            SubCategoryId = new Guid("c78774c6-65c5-4d77-ab68-d9b27aef707d")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("5ed5f1c8-98c6-48e0-b479-51a81d3036d9"),
                            SubCategoryId = new Guid("89132449-6f33-4a1a-a8a0-24a72e99fab7")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("1e746e77-4e0a-4c04-aba2-1a347767ad3a"),
                            SubCategoryId = new Guid("465da332-d175-4ea7-9452-eddc8d6fe7e5")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("1e746e77-4e0a-4c04-aba2-1a347767ad3a"),
                            SubCategoryId = new Guid("d38b77d4-2ba2-404e-bc9c-ee5a55925176")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("1e746e77-4e0a-4c04-aba2-1a347767ad3a"),
                            SubCategoryId = new Guid("2f53ee6b-277e-4b76-810d-15414fe7b32b")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("a27bb29f-b235-40d4-bb11-ea4318afd3c6"),
                            SubCategoryId = new Guid("4e42eba0-be74-4b1b-968d-9c104a417c10")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("a27bb29f-b235-40d4-bb11-ea4318afd3c6"),
                            SubCategoryId = new Guid("a1ae6147-9ed9-4243-8c9c-90d9a2549536")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("c98b256b-dc33-4680-a53e-084c0111844b"),
                            SubCategoryId = new Guid("ccb576a8-1774-4fb3-81f6-b1ba285da1f3")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("c98b256b-dc33-4680-a53e-084c0111844b"),
                            SubCategoryId = new Guid("f5668d1f-6250-4da1-87d9-fe144189d1fd")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("c98b256b-dc33-4680-a53e-084c0111844b"),
                            SubCategoryId = new Guid("8359654e-6e96-4254-999b-51b0ad1c9e1f")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("14b122d0-90bf-45aa-8b92-e02cd29784d3"),
                            SubCategoryId = new Guid("5dcda147-b9e1-4881-adc9-c9ed4837c8cf")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("14b122d0-90bf-45aa-8b92-e02cd29784d3"),
                            SubCategoryId = new Guid("db6a3733-625e-4ad2-bdf5-32337a91df12")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("14b122d0-90bf-45aa-8b92-e02cd29784d3"),
                            SubCategoryId = new Guid("a9203c28-f272-4c4c-92b8-0d75352a31cb")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("510af335-4b59-49fe-8022-141f5cc410d4"),
                            SubCategoryId = new Guid("5dcda147-b9e1-4881-adc9-c9ed4837c8cf")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("510af335-4b59-49fe-8022-141f5cc410d4"),
                            SubCategoryId = new Guid("db6a3733-625e-4ad2-bdf5-32337a91df12")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("510af335-4b59-49fe-8022-141f5cc410d4"),
                            SubCategoryId = new Guid("a9203c28-f272-4c4c-92b8-0d75352a31cb")
                        });
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("37216e26-1916-41fb-b264-5d06f7872225"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "021fa647-4713-4e6e-9649-c9e33242d45a",
                            Email = "user1@test.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@TEST.BG",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEEnNe39P9D9blooFfyu/rirNk7a8Cw5ggIVuNauhHCXSprf5phaf6XuYNgBZiUq7UA==",
                            PaymentMethodId = new Guid("11fc7d8e-9363-47af-8d0c-e0ef73c471f7"),
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "HNPD455OYW2GR6AGOIK7IWTPSCRJPVBX",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = new Guid("ae3730fd-295e-4778-abc4-8a636e9f645e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "562f6d1b-889f-48ef-adcb-1ed2868c56ab",
                            Email = "User2@test.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@TEST.BG",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEFLGAbCRXD7VxA2lq/zj2ZkTVRzCPydB1knvRIK+6MdcUf935jnHbrd6v3fvcPdfPQ==",
                            PaymentMethodId = new Guid("4ab3226d-a16d-49e6-8d91-0bd99cc15d8f"),
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "Z2WL23KVK2KH5ILZ7XSDU6LFD7BSHQZ2",
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = new Guid("883e940e-e696-495c-a527-f4b497de1995"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17622983-1640-4665-9454-2e3fdf078329",
                            Email = "User3@test.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@TEST.BG",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAEAACcQAAAAEM3greQ70ALJUnEhOvFm6Yco8M6Qj7GPMwoV30FSPmvS0t/LxrsClsbJXSaRGA4mcQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "Q4VGRSPQVQROITNW7PRGFXCQT3YIZVLZ",
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        });
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.ArtStyle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Style name (e.g. Fantasy, Retro, SciFi, Steampunk)");

                    b.HasKey("Id");

                    b.ToTable("ArtStyles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0263c1c2-da3e-4496-9cda-dcb89213a9d6"),
                            Name = "Modern"
                        },
                        new
                        {
                            Id = new Guid("77bd0468-6c70-4314-936b-b9612604e257"),
                            Name = "Medieval"
                        },
                        new
                        {
                            Id = new Guid("b8ec1523-e249-45cc-8c48-ef78915a5e52"),
                            Name = "Futuristic"
                        },
                        new
                        {
                            Id = new Guid("d5bc94dd-a06c-4744-be19-4206a84ab96c"),
                            Name = "Steampunk"
                        },
                        new
                        {
                            Id = new Guid("e7592028-354c-46ce-adec-b41525ccf712"),
                            Name = "Sci-Fi"
                        },
                        new
                        {
                            Id = new Guid("9239d5ba-e831-4b1d-9f4a-7016f096d2ad"),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("d56f1f8f-826b-4889-a1e7-ab10ab63e975"),
                            Name = "Cyberpunk"
                        },
                        new
                        {
                            Id = new Guid("bb41cad1-38dc-4895-bcb4-781d25821bed"),
                            Name = "Retro"
                        });
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtStyleId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Asset art style");

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Asset public display name.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date that the asset was created");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date the asset was deleted");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Asset asset description for the public store page.");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Encoded name of the user uploaded asset file.");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Soft delete");

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Is the asset page public and asset available for purchase");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date that the asset was last modified");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money")
                        .HasComment("Price of the asset");

                    b.Property<int>("SalesCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("Asset total sales.");

                    b.Property<Guid>("ShopId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Seller profile owning the asset.");

                    b.Property<string>("Version")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("User defined asset version identifier.");

                    b.HasKey("Id");

                    b.HasIndex("ArtStyleId");

                    b.HasIndex("ShopId");

                    b.ToTable("Assets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a593e06-b76d-4fc8-97a9-1400c907f378"),
                            ArtStyleId = new Guid("9239d5ba-e831-4b1d-9f4a-7016f096d2ad"),
                            AssetName = "Stick man Animation Walk",
                            CreatedOn = new DateTime(2023, 8, 3, 21, 17, 41, 0, DateTimeKind.Unspecified),
                            Description = "Stick man animation series. Walk.\r\n\r\nSprite sheet 5 frames.",
                            FileName = "spritesheet.zip",
                            IsDeleted = false,
                            IsPublic = false,
                            Price = 1.50m,
                            SalesCount = 0,
                            ShopId = new Guid("d83edc2e-d407-4411-b750-e7e55fb28fc4"),
                            Version = "A-3"
                        },
                        new
                        {
                            Id = new Guid("33693985-9f7e-464f-9dee-2005a19a1865"),
                            ArtStyleId = new Guid("e7592028-354c-46ce-adec-b41525ccf712"),
                            AssetName = "Torus",
                            CreatedOn = new DateTime(2023, 8, 3, 20, 39, 48, 0, DateTimeKind.Unspecified),
                            Description = "Another shape\r\n\r\n\r\n\r\n\r\n\r\n",
                            FileName = "torus.zip",
                            IsDeleted = false,
                            IsPublic = false,
                            SalesCount = 0,
                            ShopId = new Guid("25c159f2-7159-4da5-a5e1-8d0081c6e2e1"),
                            Version = "Hm"
                        },
                        new
                        {
                            Id = new Guid("c017a10c-80f3-4184-ac8b-2b912c15d568"),
                            ArtStyleId = new Guid("b8ec1523-e249-45cc-8c48-ef78915a5e52"),
                            AssetName = "Cylinder",
                            CreatedOn = new DateTime(2023, 8, 3, 20, 30, 1, 0, DateTimeKind.Unspecified),
                            FileName = "Cylinder.zip",
                            IsDeleted = false,
                            IsPublic = false,
                            Price = 2.00m,
                            SalesCount = 0,
                            ShopId = new Guid("25c159f2-7159-4da5-a5e1-8d0081c6e2e1"),
                            Version = "A"
                        },
                        new
                        {
                            Id = new Guid("755dcf8a-be70-4351-8cd3-4ebd2765e520"),
                            ArtStyleId = new Guid("9239d5ba-e831-4b1d-9f4a-7016f096d2ad"),
                            AssetName = "Monekey",
                            CreatedOn = new DateTime(2023, 8, 3, 20, 51, 0, 0, DateTimeKind.Unspecified),
                            Description = "Yep",
                            FileName = "Suzanne.zip",
                            IsDeleted = false,
                            IsPublic = false,
                            SalesCount = 0,
                            ShopId = new Guid("d83edc2e-d407-4411-b750-e7e55fb28fc4"),
                            Version = "z23"
                        },
                        new
                        {
                            Id = new Guid("9e7a3e53-ae65-4908-aa4c-9291dda70717"),
                            ArtStyleId = new Guid("e7592028-354c-46ce-adec-b41525ccf712"),
                            AssetName = "Sphere",
                            CreatedOn = new DateTime(2023, 8, 3, 20, 37, 28, 0, DateTimeKind.Unspecified),
                            Description = "A sphere.\r\nIt can be used as a ball as well.\r\n\r\nMarble.\r\nBasically anything round sphere like that you need.\r\n\r\nI&#39;m putting it in a wrong category to test things. ",
                            FileName = "sphere.zip",
                            IsDeleted = false,
                            IsPublic = false,
                            Price = 345.00m,
                            SalesCount = 0,
                            ShopId = new Guid("25c159f2-7159-4da5-a5e1-8d0081c6e2e1"),
                            Version = "A-3"
                        },
                        new
                        {
                            Id = new Guid("97501e8c-cc13-4123-b79d-b4ef776919aa"),
                            ArtStyleId = new Guid("d5bc94dd-a06c-4744-be19-4206a84ab96c"),
                            AssetName = "Gear",
                            CreatedOn = new DateTime(2023, 8, 3, 20, 31, 57, 0, DateTimeKind.Unspecified),
                            Description = "Cogwheel with a hole.",
                            FileName = "gear.zip",
                            IsDeleted = false,
                            IsPublic = false,
                            Price = 33.33m,
                            SalesCount = 0,
                            ShopId = new Guid("25c159f2-7159-4da5-a5e1-8d0081c6e2e1"),
                            Version = "43.5V"
                        },
                        new
                        {
                            Id = new Guid("f3813f3f-e34a-49a6-a439-bc5a2273184c"),
                            ArtStyleId = new Guid("b8ec1523-e249-45cc-8c48-ef78915a5e52"),
                            AssetName = "A totally different bolt",
                            CreatedOn = new DateTime(2023, 8, 3, 20, 49, 42, 0, DateTimeKind.Unspecified),
                            Description = "Will do new ones if I got time left so probably not.",
                            FileName = "bolt.zip",
                            IsDeleted = false,
                            IsPublic = false,
                            Price = 44.00m,
                            SalesCount = 0,
                            ShopId = new Guid("d83edc2e-d407-4411-b750-e7e55fb28fc4"),
                            Version = "45g"
                        },
                        new
                        {
                            Id = new Guid("588f0697-ea69-42b5-a465-c49b2d381863"),
                            ArtStyleId = new Guid("d56f1f8f-826b-4889-a1e7-ab10ab63e975"),
                            AssetName = "Stick man Animation Idle",
                            CreatedOn = new DateTime(2023, 8, 3, 21, 14, 49, 0, DateTimeKind.Unspecified),
                            Description = "Stick man animation series. Idle.\r\n\r\nSprite sheet 5 frames.",
                            FileName = "spritesheet.zip",
                            IsDeleted = false,
                            IsPublic = false,
                            Price = 1.00m,
                            SalesCount = 0,
                            ShopId = new Guid("d83edc2e-d407-4411-b750-e7e55fb28fc4"),
                            Version = "new"
                        },
                        new
                        {
                            Id = new Guid("b02d32fa-4ae8-4724-9586-c56683ff9dcd"),
                            ArtStyleId = new Guid("bb41cad1-38dc-4895-bcb4-781d25821bed"),
                            AssetName = "Fiber Texture",
                            CreatedOn = new DateTime(2023, 8, 3, 20, 44, 16, 0, DateTimeKind.Unspecified),
                            Description = "A texture that is actually from a real thing I did.\r\nhttps://www.youtube.com/watch?v=GzbGfSNuxSc",
                            FileName = "fiber_set.zip",
                            IsDeleted = false,
                            IsPublic = false,
                            Price = 17.50m,
                            SalesCount = 0,
                            ShopId = new Guid("25c159f2-7159-4da5-a5e1-8d0081c6e2e1"),
                            Version = "new"
                        },
                        new
                        {
                            Id = new Guid("c7bc601f-c4a1-4569-8b6a-cdc57714e40d"),
                            ArtStyleId = new Guid("77bd0468-6c70-4314-936b-b9612604e257"),
                            AssetName = "Suzanne From Blender",
                            CreatedOn = new DateTime(2023, 8, 3, 20, 46, 25, 0, DateTimeKind.Unspecified),
                            Description = "A named monkey head.",
                            FileName = "Suzanne.zip",
                            IsDeleted = false,
                            IsPublic = false,
                            SalesCount = 0,
                            ShopId = new Guid("25c159f2-7159-4da5-a5e1-8d0081c6e2e1"),
                            Version = "Suzanne"
                        },
                        new
                        {
                            Id = new Guid("7efbf3d9-4206-4b7b-b659-f0072348d9f0"),
                            ArtStyleId = new Guid("bb41cad1-38dc-4895-bcb4-781d25821bed"),
                            AssetName = "Cube",
                            CreatedOn = new DateTime(2023, 8, 3, 20, 28, 25, 0, DateTimeKind.Unspecified),
                            Description = "A cube. It has 6 sides! ",
                            FileName = "cube.zip",
                            IsDeleted = false,
                            IsPublic = false,
                            SalesCount = 0,
                            ShopId = new Guid("25c159f2-7159-4da5-a5e1-8d0081c6e2e1"),
                            Version = "2z"
                        },
                        new
                        {
                            Id = new Guid("3a815a72-fc65-4a95-bcd1-f22583602817"),
                            ArtStyleId = new Guid("0263c1c2-da3e-4496-9cda-dcb89213a9d6"),
                            AssetName = "Bolt",
                            CreatedOn = new DateTime(2023, 8, 3, 20, 26, 48, 0, DateTimeKind.Unspecified),
                            Description = "A nice bolt.",
                            FileName = "bolt.zip",
                            IsDeleted = false,
                            IsPublic = false,
                            Price = 25.00m,
                            SalesCount = 0,
                            ShopId = new Guid("25c159f2-7159-4da5-a5e1-8d0081c6e2e1"),
                            Version = "0.2"
                        });
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.GeneralCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Category name (e.g. 3D, Texture, Audio)");

                    b.HasKey("Id");

                    b.ToTable("GeneralCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("59a1562a-6e96-4d82-b025-a28cb59c7e0c"),
                            Name = "3D"
                        },
                        new
                        {
                            Id = new Guid("e70af9fb-3fe7-430e-a959-2c201383e83a"),
                            Name = "Low poly"
                        },
                        new
                        {
                            Id = new Guid("5ed5f1c8-98c6-48e0-b479-51a81d3036d9"),
                            Name = "2D"
                        },
                        new
                        {
                            Id = new Guid("1e746e77-4e0a-4c04-aba2-1a347767ad3a"),
                            Name = "Textures"
                        },
                        new
                        {
                            Id = new Guid("c98b256b-dc33-4680-a53e-084c0111844b"),
                            Name = "Audio"
                        },
                        new
                        {
                            Id = new Guid("14b122d0-90bf-45aa-8b92-e02cd29784d3"),
                            Name = "Addons"
                        },
                        new
                        {
                            Id = new Guid("510af335-4b59-49fe-8022-141f5cc410d4"),
                            Name = "Scripts"
                        },
                        new
                        {
                            Id = new Guid("a27bb29f-b235-40d4-bb11-ea4318afd3c6"),
                            Name = "Vfx"
                        });
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(100.00m)
                        .HasComment("A fake balance.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Name of the payment method");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasComment("A fake payment method fo testing");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11fc7d8e-9363-47af-8d0c-e0ef73c471f7"),
                            Balance = 0m,
                            Name = "Bank1"
                        },
                        new
                        {
                            Id = new Guid("4ab3226d-a16d-49e6-8d91-0bd99cc15d8f"),
                            Balance = 0m,
                            Name = "Bank2"
                        });
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Review text content");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date that the review was created");

                    b.Property<int>("Dislikes")
                        .HasColumnType("int")
                        .HasComment("Review dislikes");

                    b.Property<int>("Likes")
                        .HasColumnType("int")
                        .HasComment("Review likes");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date that the review was last edited");

                    b.Property<Guid>("ReviewCreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Review creator");

                    b.Property<Guid>("ReviewedAssetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Reviewed asset");

                    b.HasKey("Id");

                    b.HasIndex("ReviewCreatorId");

                    b.HasIndex("ReviewedAssetId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.Shop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwningUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("User owning the shop profile.");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Optional name for the seller page.");

                    b.Property<string>("SupportEmail")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Optional email address for asset questions and support.");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwningUserId")
                        .IsUnique();

                    b.HasIndex("ShopName")
                        .IsUnique();

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = new Guid("25c159f2-7159-4da5-a5e1-8d0081c6e2e1"),
                            OwningUserId = new Guid("37216e26-1916-41fb-b264-5d06f7872225"),
                            ShopName = "Good Stuff"
                        },
                        new
                        {
                            Id = new Guid("d83edc2e-d407-4411-b750-e7e55fb28fc4"),
                            OwningUserId = new Guid("ae3730fd-295e-4778-abc4-8a636e9f645e"),
                            ShopName = "User2"
                        });
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.SocialLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LinkUrl")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<int>("SocialType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SocialLinks");
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("SubCategory name (e.g. LowPoly, SFX, Music)");

                    b.HasKey("Id");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1359383e-3a4e-408d-91fb-aa9b9425df6f"),
                            Name = "Characters"
                        },
                        new
                        {
                            Id = new Guid("fdeb520b-93db-492b-a152-19a5a9c29227"),
                            Name = "Props"
                        },
                        new
                        {
                            Id = new Guid("d8ac59b9-c97a-47db-a3de-3c7ed15515d5"),
                            Name = "Environment"
                        },
                        new
                        {
                            Id = new Guid("0cb36015-ffd6-4836-a0f3-2f8bc803a75e"),
                            Name = "Materials"
                        },
                        new
                        {
                            Id = new Guid("2681e9d1-344b-4d58-8916-2c8732465d0a"),
                            Name = "Background"
                        },
                        new
                        {
                            Id = new Guid("abf6b357-436f-43cc-8eb9-7b4cb7a333dd"),
                            Name = "Tile set"
                        },
                        new
                        {
                            Id = new Guid("eeb4556f-1b3e-4b25-81ef-8f2c1cc11498"),
                            Name = "Pixel Art"
                        },
                        new
                        {
                            Id = new Guid("c78774c6-65c5-4d77-ab68-d9b27aef707d"),
                            Name = "Sprite sheet"
                        },
                        new
                        {
                            Id = new Guid("89132449-6f33-4a1a-a8a0-24a72e99fab7"),
                            Name = "UI"
                        },
                        new
                        {
                            Id = new Guid("465da332-d175-4ea7-9452-eddc8d6fe7e5"),
                            Name = "Tileable"
                        },
                        new
                        {
                            Id = new Guid("d38b77d4-2ba2-404e-bc9c-ee5a55925176"),
                            Name = "Non Tileable"
                        },
                        new
                        {
                            Id = new Guid("2f53ee6b-277e-4b76-810d-15414fe7b32b"),
                            Name = "Decal"
                        },
                        new
                        {
                            Id = new Guid("4e42eba0-be74-4b1b-968d-9c104a417c10"),
                            Name = "VFX 3D"
                        },
                        new
                        {
                            Id = new Guid("a1ae6147-9ed9-4243-8c9c-90d9a2549536"),
                            Name = "VFX 2D"
                        },
                        new
                        {
                            Id = new Guid("ccb576a8-1774-4fb3-81f6-b1ba285da1f3"),
                            Name = "Music"
                        },
                        new
                        {
                            Id = new Guid("f5668d1f-6250-4da1-87d9-fe144189d1fd"),
                            Name = "Ambient"
                        },
                        new
                        {
                            Id = new Guid("8359654e-6e96-4254-999b-51b0ad1c9e1f"),
                            Name = "Sfx"
                        },
                        new
                        {
                            Id = new Guid("5dcda147-b9e1-4881-adc9-c9ed4837c8cf"),
                            Name = "Unreal Engine"
                        },
                        new
                        {
                            Id = new Guid("db6a3733-625e-4ad2-bdf5-32337a91df12"),
                            Name = "Godot"
                        },
                        new
                        {
                            Id = new Guid("a9203c28-f272-4c4c-92b8-0d75352a31cb"),
                            Name = "Unity"
                        });
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Value")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PublicEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a82abed6-405e-4438-a780-181794006611"),
                            UserId = new Guid("37216e26-1916-41fb-b264-5d06f7872225")
                        },
                        new
                        {
                            Id = new Guid("2b23b498-7ae0-40db-8200-a0f360635bdb"),
                            UserId = new Guid("ae3730fd-295e-4778-abc4-8a636e9f645e")
                        },
                        new
                        {
                            Id = new Guid("915dacdc-65f6-412e-af5d-ac191bf29487"),
                            UserId = new Guid("883e940e-e696-495c-a527-f4b497de1995")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "urn:shop:shopId",
                            ClaimValue = "25c159f2-7159-4da5-a5e1-8d0081c6e2e1",
                            UserId = new Guid("37216e26-1916-41fb-b264-5d06f7872225")
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "urn:shop:shopId",
                            ClaimValue = "d83edc2e-d407-4411-b750-e7e55fb28fc4",
                            UserId = new Guid("ae3730fd-295e-4778-abc4-8a636e9f645e")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ShopSocialLink", b =>
                {
                    b.Property<Guid>("ShopsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SocialsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ShopsId", "SocialsId");

                    b.HasIndex("SocialsId");

                    b.ToTable("ShopSocialLink");
                });

            modelBuilder.Entity("SocialLinkUserProfile", b =>
                {
                    b.Property<Guid>("SocialLinksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserProfilesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SocialLinksId", "UserProfilesId");

                    b.HasIndex("UserProfilesId");

                    b.ToTable("SocialLinkUserProfile");
                });

            modelBuilder.Entity("UsersPurchasedAssets", b =>
                {
                    b.Property<Guid>("PurchasedAssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PurchasedAssetId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersPurchasedAssets");
                });

            modelBuilder.Entity("AssetsCategories", b =>
                {
                    b.HasOne("GameAssetsStore.Data.Models.Asset", null)
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameAssetsStore.Data.Models.GeneralCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("AssetsSubCategories", b =>
                {
                    b.HasOne("GameAssetsStore.Data.Models.Asset", null)
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameAssetsStore.Data.Models.SubCategory", null)
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoriesSubCategories", b =>
                {
                    b.HasOne("GameAssetsStore.Data.Models.GeneralCategory", null)
                        .WithMany()
                        .HasForeignKey("GeneralCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameAssetsStore.Data.Models.SubCategory", null)
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("GameAssetsStore.Data.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("PaymentMethodId");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.Asset", b =>
                {
                    b.HasOne("GameAssetsStore.Data.Models.ArtStyle", "ArtStyle")
                        .WithMany("Assets")
                        .HasForeignKey("ArtStyleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GameAssetsStore.Data.Models.Shop", "Shop")
                        .WithMany("ShopAssets")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArtStyle");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.Review", b =>
                {
                    b.HasOne("GameAssetsStore.Data.Models.UserProfile", "ReviewCreator")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewCreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameAssetsStore.Data.Models.Asset", "ReviewedAsset")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewedAssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReviewCreator");

                    b.Navigation("ReviewedAsset");
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.Shop", b =>
                {
                    b.HasOne("GameAssetsStore.Data.Models.ApplicationUser", "OwningUser")
                        .WithOne("OwnedShop")
                        .HasForeignKey("GameAssetsStore.Data.Models.Shop", "OwningUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwningUser");
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.UserProfile", b =>
                {
                    b.HasOne("GameAssetsStore.Data.Models.ApplicationUser", "User")
                        .WithOne("Profile")
                        .HasForeignKey("GameAssetsStore.Data.Models.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GameAssetsStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GameAssetsStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameAssetsStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GameAssetsStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShopSocialLink", b =>
                {
                    b.HasOne("GameAssetsStore.Data.Models.Shop", null)
                        .WithMany()
                        .HasForeignKey("ShopsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameAssetsStore.Data.Models.SocialLink", null)
                        .WithMany()
                        .HasForeignKey("SocialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialLinkUserProfile", b =>
                {
                    b.HasOne("GameAssetsStore.Data.Models.SocialLink", null)
                        .WithMany()
                        .HasForeignKey("SocialLinksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameAssetsStore.Data.Models.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UserProfilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UsersPurchasedAssets", b =>
                {
                    b.HasOne("GameAssetsStore.Data.Models.Asset", null)
                        .WithMany()
                        .HasForeignKey("PurchasedAssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameAssetsStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("OwnedShop");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.ArtStyle", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.Asset", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.PaymentMethod", b =>
                {
                    b.Navigation("ApplicationUsers");
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.Shop", b =>
                {
                    b.Navigation("ShopAssets");
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.UserProfile", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
