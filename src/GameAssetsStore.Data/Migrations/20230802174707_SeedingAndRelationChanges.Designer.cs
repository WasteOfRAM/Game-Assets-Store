// <auto-generated />
using System;
using GameAssetsStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameAssetsStore.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230802174707_SeedingAndRelationChanges")]
    partial class SeedingAndRelationChanges
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AssetsCategories", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AssetsCategories");
                });

            modelBuilder.Entity("AssetsSubCategories", b =>
                {
                    b.Property<Guid>("AssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AssetId", "SubCategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("AssetsSubCategories");
                });

            modelBuilder.Entity("CategoriesSubCategories", b =>
                {
                    b.Property<Guid>("GeneralCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GeneralCategoryId", "SubCategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("CategoriesSubCategories");

                    b.HasData(
                        new
                        {
                            GeneralCategoryId = new Guid("59a1562a-6e96-4d82-b025-a28cb59c7e0c"),
                            SubCategoryId = new Guid("1359383e-3a4e-408d-91fb-aa9b9425df6f")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("59a1562a-6e96-4d82-b025-a28cb59c7e0c"),
                            SubCategoryId = new Guid("fdeb520b-93db-492b-a152-19a5a9c29227")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("59a1562a-6e96-4d82-b025-a28cb59c7e0c"),
                            SubCategoryId = new Guid("d8ac59b9-c97a-47db-a3de-3c7ed15515d5")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("59a1562a-6e96-4d82-b025-a28cb59c7e0c"),
                            SubCategoryId = new Guid("0cb36015-ffd6-4836-a0f3-2f8bc803a75e")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("e70af9fb-3fe7-430e-a959-2c201383e83a"),
                            SubCategoryId = new Guid("1359383e-3a4e-408d-91fb-aa9b9425df6f")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("e70af9fb-3fe7-430e-a959-2c201383e83a"),
                            SubCategoryId = new Guid("fdeb520b-93db-492b-a152-19a5a9c29227")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("e70af9fb-3fe7-430e-a959-2c201383e83a"),
                            SubCategoryId = new Guid("d8ac59b9-c97a-47db-a3de-3c7ed15515d5")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("e70af9fb-3fe7-430e-a959-2c201383e83a"),
                            SubCategoryId = new Guid("0cb36015-ffd6-4836-a0f3-2f8bc803a75e")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("5ed5f1c8-98c6-48e0-b479-51a81d3036d9"),
                            SubCategoryId = new Guid("2681e9d1-344b-4d58-8916-2c8732465d0a")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("5ed5f1c8-98c6-48e0-b479-51a81d3036d9"),
                            SubCategoryId = new Guid("fdeb520b-93db-492b-a152-19a5a9c29227")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("5ed5f1c8-98c6-48e0-b479-51a81d3036d9"),
                            SubCategoryId = new Guid("1359383e-3a4e-408d-91fb-aa9b9425df6f")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("5ed5f1c8-98c6-48e0-b479-51a81d3036d9"),
                            SubCategoryId = new Guid("abf6b357-436f-43cc-8eb9-7b4cb7a333dd")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("5ed5f1c8-98c6-48e0-b479-51a81d3036d9"),
                            SubCategoryId = new Guid("eeb4556f-1b3e-4b25-81ef-8f2c1cc11498")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("5ed5f1c8-98c6-48e0-b479-51a81d3036d9"),
                            SubCategoryId = new Guid("c78774c6-65c5-4d77-ab68-d9b27aef707d")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("5ed5f1c8-98c6-48e0-b479-51a81d3036d9"),
                            SubCategoryId = new Guid("89132449-6f33-4a1a-a8a0-24a72e99fab7")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("1e746e77-4e0a-4c04-aba2-1a347767ad3a"),
                            SubCategoryId = new Guid("465da332-d175-4ea7-9452-eddc8d6fe7e5")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("1e746e77-4e0a-4c04-aba2-1a347767ad3a"),
                            SubCategoryId = new Guid("d38b77d4-2ba2-404e-bc9c-ee5a55925176")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("1e746e77-4e0a-4c04-aba2-1a347767ad3a"),
                            SubCategoryId = new Guid("2f53ee6b-277e-4b76-810d-15414fe7b32b")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("a27bb29f-b235-40d4-bb11-ea4318afd3c6"),
                            SubCategoryId = new Guid("4e42eba0-be74-4b1b-968d-9c104a417c10")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("a27bb29f-b235-40d4-bb11-ea4318afd3c6"),
                            SubCategoryId = new Guid("a1ae6147-9ed9-4243-8c9c-90d9a2549536")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("c98b256b-dc33-4680-a53e-084c0111844b"),
                            SubCategoryId = new Guid("ccb576a8-1774-4fb3-81f6-b1ba285da1f3")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("c98b256b-dc33-4680-a53e-084c0111844b"),
                            SubCategoryId = new Guid("f5668d1f-6250-4da1-87d9-fe144189d1fd")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("c98b256b-dc33-4680-a53e-084c0111844b"),
                            SubCategoryId = new Guid("8359654e-6e96-4254-999b-51b0ad1c9e1f")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("14b122d0-90bf-45aa-8b92-e02cd29784d3"),
                            SubCategoryId = new Guid("5dcda147-b9e1-4881-adc9-c9ed4837c8cf")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("14b122d0-90bf-45aa-8b92-e02cd29784d3"),
                            SubCategoryId = new Guid("db6a3733-625e-4ad2-bdf5-32337a91df12")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("14b122d0-90bf-45aa-8b92-e02cd29784d3"),
                            SubCategoryId = new Guid("a9203c28-f272-4c4c-92b8-0d75352a31cb")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("510af335-4b59-49fe-8022-141f5cc410d4"),
                            SubCategoryId = new Guid("5dcda147-b9e1-4881-adc9-c9ed4837c8cf")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("510af335-4b59-49fe-8022-141f5cc410d4"),
                            SubCategoryId = new Guid("db6a3733-625e-4ad2-bdf5-32337a91df12")
                        },
                        new
                        {
                            GeneralCategoryId = new Guid("510af335-4b59-49fe-8022-141f5cc410d4"),
                            SubCategoryId = new Guid("a9203c28-f272-4c4c-92b8-0d75352a31cb")
                        });
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.ArtStyle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Style name (e.g. Fantasy, Retro, SciFi, Steampunk)");

                    b.HasKey("Id");

                    b.ToTable("ArtStyles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0263c1c2-da3e-4496-9cda-dcb89213a9d6"),
                            Name = "Modern"
                        },
                        new
                        {
                            Id = new Guid("77bd0468-6c70-4314-936b-b9612604e257"),
                            Name = "Medieval"
                        },
                        new
                        {
                            Id = new Guid("b8ec1523-e249-45cc-8c48-ef78915a5e52"),
                            Name = "Futuristic"
                        },
                        new
                        {
                            Id = new Guid("d5bc94dd-a06c-4744-be19-4206a84ab96c"),
                            Name = "Steampunk"
                        },
                        new
                        {
                            Id = new Guid("e7592028-354c-46ce-adec-b41525ccf712"),
                            Name = "Sci-Fi"
                        },
                        new
                        {
                            Id = new Guid("9239d5ba-e831-4b1d-9f4a-7016f096d2ad"),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("d56f1f8f-826b-4889-a1e7-ab10ab63e975"),
                            Name = "Cyberpunk"
                        },
                        new
                        {
                            Id = new Guid("bb41cad1-38dc-4895-bcb4-781d25821bed"),
                            Name = "Retro"
                        });
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtStyleId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Asset art style");

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Asset public display name.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date that the asset was created");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Asset asset description for the public store page.");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Encoded name of the user uploaded asset file.");

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Is the asset page public and asset available for purchase");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date that the asset was last modified");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money")
                        .HasComment("Price of the asset");

                    b.Property<int>("SalesCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("Asset total sales.");

                    b.Property<Guid>("ShopId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Seller profile owning the asset.");

                    b.Property<string>("Version")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("User defined asset version identifier.");

                    b.HasKey("Id");

                    b.HasIndex("ArtStyleId");

                    b.HasIndex("ShopId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.GeneralCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Category name (e.g. 3D, Texture, Audio)");

                    b.HasKey("Id");

                    b.ToTable("GeneralCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("59a1562a-6e96-4d82-b025-a28cb59c7e0c"),
                            Name = "3D"
                        },
                        new
                        {
                            Id = new Guid("e70af9fb-3fe7-430e-a959-2c201383e83a"),
                            Name = "Low poly"
                        },
                        new
                        {
                            Id = new Guid("5ed5f1c8-98c6-48e0-b479-51a81d3036d9"),
                            Name = "2D"
                        },
                        new
                        {
                            Id = new Guid("1e746e77-4e0a-4c04-aba2-1a347767ad3a"),
                            Name = "Textures"
                        },
                        new
                        {
                            Id = new Guid("c98b256b-dc33-4680-a53e-084c0111844b"),
                            Name = "Audio"
                        },
                        new
                        {
                            Id = new Guid("14b122d0-90bf-45aa-8b92-e02cd29784d3"),
                            Name = "Addons"
                        },
                        new
                        {
                            Id = new Guid("510af335-4b59-49fe-8022-141f5cc410d4"),
                            Name = "Scripts"
                        },
                        new
                        {
                            Id = new Guid("a27bb29f-b235-40d4-bb11-ea4318afd3c6"),
                            Name = "Vfx"
                        });
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Review text content");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date that the review was created");

                    b.Property<int>("Dislikes")
                        .HasColumnType("int")
                        .HasComment("Review dislikes");

                    b.Property<int>("Likes")
                        .HasColumnType("int")
                        .HasComment("Review likes");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date that the review was last edited");

                    b.Property<Guid>("ReviewCreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Review creator");

                    b.Property<Guid>("ReviewedAssetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Reviewed asset");

                    b.HasKey("Id");

                    b.HasIndex("ReviewCreatorId");

                    b.HasIndex("ReviewedAssetId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.Shop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwningUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("User owning the shop profile.");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Optional name for the seller page.");

                    b.Property<string>("SupportEmail")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Optional email address for asset questions and support.");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwningUserId")
                        .IsUnique();

                    b.HasIndex("ShopName")
                        .IsUnique();

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.SocialLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LinkUrl")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<int>("SocialType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SocialLinks");
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("SubCategory name (e.g. LowPoly, SFX, Music)");

                    b.HasKey("Id");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1359383e-3a4e-408d-91fb-aa9b9425df6f"),
                            Name = "Characters"
                        },
                        new
                        {
                            Id = new Guid("fdeb520b-93db-492b-a152-19a5a9c29227"),
                            Name = "Props"
                        },
                        new
                        {
                            Id = new Guid("d8ac59b9-c97a-47db-a3de-3c7ed15515d5"),
                            Name = "Environment"
                        },
                        new
                        {
                            Id = new Guid("0cb36015-ffd6-4836-a0f3-2f8bc803a75e"),
                            Name = "Materials"
                        },
                        new
                        {
                            Id = new Guid("2681e9d1-344b-4d58-8916-2c8732465d0a"),
                            Name = "Background"
                        },
                        new
                        {
                            Id = new Guid("abf6b357-436f-43cc-8eb9-7b4cb7a333dd"),
                            Name = "Tile set"
                        },
                        new
                        {
                            Id = new Guid("eeb4556f-1b3e-4b25-81ef-8f2c1cc11498"),
                            Name = "Pixel Art"
                        },
                        new
                        {
                            Id = new Guid("c78774c6-65c5-4d77-ab68-d9b27aef707d"),
                            Name = "Sprite sheet"
                        },
                        new
                        {
                            Id = new Guid("89132449-6f33-4a1a-a8a0-24a72e99fab7"),
                            Name = "UI"
                        },
                        new
                        {
                            Id = new Guid("465da332-d175-4ea7-9452-eddc8d6fe7e5"),
                            Name = "Tileable"
                        },
                        new
                        {
                            Id = new Guid("d38b77d4-2ba2-404e-bc9c-ee5a55925176"),
                            Name = "Non Tileable"
                        },
                        new
                        {
                            Id = new Guid("2f53ee6b-277e-4b76-810d-15414fe7b32b"),
                            Name = "Decal"
                        },
                        new
                        {
                            Id = new Guid("4e42eba0-be74-4b1b-968d-9c104a417c10"),
                            Name = "VFX 3D"
                        },
                        new
                        {
                            Id = new Guid("a1ae6147-9ed9-4243-8c9c-90d9a2549536"),
                            Name = "VFX 2D"
                        },
                        new
                        {
                            Id = new Guid("ccb576a8-1774-4fb3-81f6-b1ba285da1f3"),
                            Name = "Music"
                        },
                        new
                        {
                            Id = new Guid("f5668d1f-6250-4da1-87d9-fe144189d1fd"),
                            Name = "Ambient"
                        },
                        new
                        {
                            Id = new Guid("8359654e-6e96-4254-999b-51b0ad1c9e1f"),
                            Name = "Sfx"
                        },
                        new
                        {
                            Id = new Guid("5dcda147-b9e1-4881-adc9-c9ed4837c8cf"),
                            Name = "Unreal Engine"
                        },
                        new
                        {
                            Id = new Guid("db6a3733-625e-4ad2-bdf5-32337a91df12"),
                            Name = "Godot"
                        },
                        new
                        {
                            Id = new Guid("a9203c28-f272-4c4c-92b8-0d75352a31cb"),
                            Name = "Unity"
                        });
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PublicEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ShopSocialLink", b =>
                {
                    b.Property<Guid>("ShopsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SocialsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ShopsId", "SocialsId");

                    b.HasIndex("SocialsId");

                    b.ToTable("ShopSocialLink");
                });

            modelBuilder.Entity("SocialLinkUserProfile", b =>
                {
                    b.Property<Guid>("SocialLinksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserProfilesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SocialLinksId", "UserProfilesId");

                    b.HasIndex("UserProfilesId");

                    b.ToTable("SocialLinkUserProfile");
                });

            modelBuilder.Entity("UsersAssets", b =>
                {
                    b.Property<Guid>("AssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AssetId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersAssets");
                });

            modelBuilder.Entity("AssetsCategories", b =>
                {
                    b.HasOne("GameAssetsStore.Data.Models.GeneralCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameAssetsStore.Data.Models.Asset", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("AssetsSubCategories", b =>
                {
                    b.HasOne("GameAssetsStore.Data.Models.Asset", null)
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameAssetsStore.Data.Models.SubCategory", null)
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoriesSubCategories", b =>
                {
                    b.HasOne("GameAssetsStore.Data.Models.GeneralCategory", null)
                        .WithMany()
                        .HasForeignKey("GeneralCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameAssetsStore.Data.Models.SubCategory", null)
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.Asset", b =>
                {
                    b.HasOne("GameAssetsStore.Data.Models.ArtStyle", "ArtStyle")
                        .WithMany("Assets")
                        .HasForeignKey("ArtStyleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GameAssetsStore.Data.Models.Shop", "Shop")
                        .WithMany("ShopAssets")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArtStyle");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.Review", b =>
                {
                    b.HasOne("GameAssetsStore.Data.Models.UserProfile", "ReviewCreator")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewCreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameAssetsStore.Data.Models.Asset", "ReviewedAsset")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewedAssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReviewCreator");

                    b.Navigation("ReviewedAsset");
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.Shop", b =>
                {
                    b.HasOne("GameAssetsStore.Data.Models.ApplicationUser", "OwningUser")
                        .WithOne("OwnedShop")
                        .HasForeignKey("GameAssetsStore.Data.Models.Shop", "OwningUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwningUser");
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.UserProfile", b =>
                {
                    b.HasOne("GameAssetsStore.Data.Models.ApplicationUser", "User")
                        .WithOne("Profile")
                        .HasForeignKey("GameAssetsStore.Data.Models.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GameAssetsStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GameAssetsStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameAssetsStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GameAssetsStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShopSocialLink", b =>
                {
                    b.HasOne("GameAssetsStore.Data.Models.Shop", null)
                        .WithMany()
                        .HasForeignKey("ShopsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameAssetsStore.Data.Models.SocialLink", null)
                        .WithMany()
                        .HasForeignKey("SocialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialLinkUserProfile", b =>
                {
                    b.HasOne("GameAssetsStore.Data.Models.SocialLink", null)
                        .WithMany()
                        .HasForeignKey("SocialLinksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameAssetsStore.Data.Models.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UserProfilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UsersAssets", b =>
                {
                    b.HasOne("GameAssetsStore.Data.Models.Asset", null)
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameAssetsStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("OwnedShop");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.ArtStyle", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.Asset", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.Shop", b =>
                {
                    b.Navigation("ShopAssets");
                });

            modelBuilder.Entity("GameAssetsStore.Data.Models.UserProfile", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
